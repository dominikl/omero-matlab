Connect to OMERO
^^^^^^^^^^^^^^^^

-  **Connect to a server**

::

        % Use the ice.config file defined in the path
        client = loadOmero();
        p = parseOmeroProperties(client);
        fprintf(1, 'Created connection to %s\n', p.hostname); 

::

        % Alternate ways to create clients
        % client = loadOmero(hostname);
        % client = loadOmero('path/to/ice.config'); 

::

        % Information to edit
        username = p.username;
        password = p.password; 

::

        % Create OMERO session
        session = client.createSession(username, password);
        adminService = session.getAdminService(); 

::

        % Retrieve the information of the user
        userId = adminService.getEventContext().userId;
        userName = char(adminService.getEventContext().userName); 

::

        % The group the user is currently logged in i.e. his/her default group
        groupId = adminService.getEventContext().groupId;
        groupName = char(adminService.getEventContext().groupName); 

::

        fprintf(1, 'Created session for user %s (id: %g) using group %s (id: %g)\n',...
            userName, userId, groupName, groupId); 

::

        %necessary to keep the proxy alive. part of the omero-package
        disp('Keep session alive');
        t = omeroKeepAlive(client);
        stop(t);
        delete(t); 

-  **Admin service**

::

        % Retrieve the identifier of the groups the user is member/owner of
        user = adminService.getExperimenter(userId);
        groupIds1 = toMatlabList(adminService.getMemberOfGroupIds(user));
        groupIds2 = toMatlabList(adminService.getLeaderOfGroupIds(user)); 

::

        % List all groups the user is member of
        disp('Group membership');
        for groupId = groupIds1'
            group = adminService.getGroup(groupId);
            fprintf(1, ' Group %s (id: %g, type: %s)\n',...
                char(group.getName().getValue()), groupId,...
                char(group.getDetails().getPermissions()));
        end 

::

        % List all groups the user is owner of
        disp('Group ownership');
        for groupId = groupIds2'
            group = adminService.getGroup(groupId);
            fprintf(1, ' Group %s (id: %g, type: %s)\n',...
                char(group.getName().getValue()), groupId,...
                char(group.getDetails().getPermissions()));
        end 

-  **Unencrypted session**

::

        % Create an unsecure client and session
        % Use this session to speed up data transfer since there will be no
        % encryption
        unsecureClient = client.createClient(false);
        sessionUnencrypted = unsecureClient.getSession();
        fprintf(1, 'Created encryted session for user %s (id: %g)\n',...
            userName, userId); 

Read data
^^^^^^^^^

::

        % Initialize a client and a session using the ice.config file
        % See ConnectToOMERO for alternative ways to initialize a session
        [client, session] = loadOmero();
        p = parseOmeroProperties(client);
        eventContext = session.getAdminService().getEventContext();
        fprintf(1, 'Created connection to %s\n', p.hostname);
        msg = 'Created session for user %s (id: %g) using group %s (id: %g)\n';
        fprintf(1, msg, char(eventContext.userName), eventContext.userId,...
            char(eventContext.groupName), eventContext.groupId); 

::

        % Information to edit
        projectId = p.projectid;
        datasetId = p.datasetid;
        imageId = p.imageid;
        plateId = p.plateid;
        groupId = eventContext.groupId; 

::

        print_object = @(x) fprintf(1, '  %s (id: %d, owner: %d, group: %d)\n',...
            char(x.getName().getValue()), x.getId().getValue(),...
            x.getDetails().getOwner().getId().getValue(),...
            x.getDetails().getGroup().getId().getValue()); 

-  **Projects**

::

        % Retrieve all the projects and orphaned datasets owned by session
        % owner in the current context
        % If a project contains datasets, the datasets will automatically be
        % loaded but the images contained in the datasets are not loaded.
        disp(['Retrieving projects and orphaned datasets owned '...
            'by the session user in the current group']);
        [projects, orphanedDatasets] = getProjects(session);
        fprintf(1, '  Found %g projects\n', numel(projects));
        for i = 1 : numel(projects),
            print_object(projects(i));
            datasets = toMatlabList(projects(i).linkedDatasetList);
            for j = 1 : numel(datasets),
                fprintf(1, '  ');
                print_object(datasets(j));
            end
        end
        fprintf(1, '  Found %g orphaned datasets\n', numel(orphanedDatasets));
        for j = 1 : numel(orphanedDatasets),
            print_object(orphanedDatasets(j));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the unloaded projects owned by the session owner across
        % groups
        disp('Retrieving projects owned by the session user across groups')
        projects = getProjects(session, 'group', -1);
        fprintf(1, '  Found %g projects\n', numel(projects));
        for i = 1 : numel(projects),
            print_object(projects(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the unloaded projects owned by any user in the
        % context of the current session group
        disp('Retrieving projects owned by any user in the current group')
        projects = getProjects(session, 'owner', -1);
        fprintf(1, '  Found %g projects\n', numel(projects));
        for i = 1 : numel(projects),
            print_object(projects(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the unloaded projects owned by the session user in the
        % context of the specified group
        disp('Retrieving projects owned by the session user in a specified group')
        projects = getProjects(session, 'group', groupId);
        fprintf(1, '  Found %g projects\n', numel(projects));
        for i = 1 : numel(projects),
            print_object(projects(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve a loaded project specified by an input identifier
        % If the dataset contains images, the images will be loaded
        fprintf(1, 'Reading project %g with loaded images\n', projectId);
        project = getProjects(session, projectId, true);
        assert(~isempty(project), 'OMERO:ReadData', 'Project Id not valid');
        datasets = toMatlabList(project.linkedDatasetList);
        for i = 1 : numel(datasets),
            print_object(datasets(i));
            images = toMatlabList(datasets(i).linkedImageList);
            for j = 1 : numel(images)
                fprintf(1, '  ');
                print_object(images(j));
            end
        end
        fprintf(1, '\n'); 

-  **Datasets**

::

        % Retrieve all the unloaded datasets owned by the session owner.
        % If the datasets contain images, the images will not be loaded.
        disp('Listing datasets owned by the session user');
        allDatasets = getDatasets(session);
        fprintf(1, '  Found %g datasets\n', numel(allDatasets));
        for i = 1 : numel(allDatasets),
            print_object(allDatasets(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the unloaded datasets owned by the session owner across
        % all groups
        disp('Retrieving dataset owned by the session user across all groups')
        allDatasetsAllGroups = getDatasets(session, 'group', -1);
        fprintf(1, '  Found %g datasets\n', numel(allDatasetsAllGroups));
        for i = 1 : numel(allDatasetsAllGroups),
            print_object(allDatasetsAllGroups(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the unloaded datasets owned by any user in the
        % context of the current session group
        disp('Retrieving datasets owned by any user in the current group')
        datasets = getDatasets(session, 'owner', -1);
        fprintf(1, '  Found %g datasets\n', numel(datasets));
        for i = 1 : numel(datasets),
            print_object(datasets(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the unloaded datasets owned by the session user in the
        % context of the specified group
        disp('Retrieving datasets owned by the session user in a specified group')
        datasets = getDatasets(session, 'group', groupId);
        fprintf(1, '  Found %g datasets\n', numel(datasets));
        for i = 1 : numel(datasets),
            print_object(datasets(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve a loaded dataset specified by an input identifier
        % If the dataset contains images, the images will be loaded
        fprintf(1, 'Retrieving dataset %g with loaded images\n', datasetId);
        dataset = getDatasets(session, datasetId, true);
        assert(~isempty(dataset), 'OMERO:ReadData', 'Dataset Id not valid');
        images = toMatlabList(dataset.linkedImageList); % The images in the dataset.
        fprintf(1, '  Found %g images\n', numel(images));
        for i = 1 : numel(images),
            print_object(images(i));
        end
        fprintf(1, '\n'); 

-  **Images**

::

        % Retrieve all the images owned by the session user.
        disp('Retrieving images owned by the session user in the current group')
        allImages = getImages(session);
        fprintf(1, ' Found %g images\n', numel(allImages));
        for i = 1 : numel(allImages),
            print_object(allImages(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the images owned by the session user across all groups
        disp('Retrieving images owned by the session user across groups')
        allImagesAllGroups = getImages(session, 'group', -1);
        fprintf(1, '  Found %g images\n', numel(allImagesAllGroups));
        for i = 1 : numel(allImagesAllGroups),
            print_object(allImagesAllGroups(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the images owned by the session user in the
        % context of the specified group
        disp('Retrieving images owned by the session user in a specified group')
        images = getImages(session, 'group', groupId);
        fprintf(1, '  Found %g images\n', numel(images));
        for i = 1 : numel(images),
            print_object(images(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the images contained in a given dataset.
        fprintf(1, 'Retrieving images contained in dataset %g\n', datasetId);
        images2 = getImages(session, 'dataset', datasetId);
        fprintf(1, '  Found %g images\n', numel(images2));
        for i = 1 : numel(images2),
            print_object(images2(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the images contained in a given project.
        fprintf(1, 'Retrieving images contained in project %g\n', projectId);
        images3 = getImages(session, 'project', projectId);
        fprintf(1, '  Found %g images\n', numel(images3));
        for i = 1 : numel(images3),
            print_object(images3(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve an image if the identifier is known.
        fprintf(1, 'Retrieving image: %g\n', imageId);
        image = getImages(session, imageId);
        proxy = session.getContainerService();
        assert(~isempty(image), 'OMERO:ReadData', 'Image Id not valid'); 

::

        % Access information about the image for example to draw it.
        % The model is a follow: Image-Pixels i.e. to access valuable data about
        % the image you need to use the pixels object.
        % We now only support one set of pixels per image (it used to be more!). 

::

        pixels = image.getPrimaryPixels();
        sizeZ = pixels.getSizeZ().getValue(); % The number of z-sections.
        sizeT = pixels.getSizeT().getValue(); % The number of timepoints.
        sizeC = pixels.getSizeC().getValue(); % The number of channels.
        sizeX = pixels.getSizeX().getValue(); % The number of pixels along the X-axis.
        sizeY = pixels.getSizeY().getValue(); % The number of pixels along the Y-axis.
        fprintf(1, '  SizeX: %g\n', sizeX);
        fprintf(1, '  SizeY: %g\n', sizeY);
        fprintf(1, '  SizeZ: %g\n', sizeZ);
        fprintf(1, '  SizeC: %g\n', sizeC);
        fprintf(1, '  SizeT: %g\n', sizeT);
        fprintf(1, '\n'); 

-  **Screens**

::

        % Retrieve Screening data owned by the user currently logged in.
        % There is no explicit method in the gateway exposed to retrieve screening data
        % (to learn about the model go to ScreenPlateWell) but you can use the ContainerService to
        % load the data, you can use the method `findAllByQuery`. 

::

        % load Screen and plate owned by the user currently logged in
        disp('Retrieving all screens and orphaned plates owned by the session user')
        [screens, orphanedPlates] = getScreens(session);
        fprintf(1, '  Found %g screens\n', numel(screens));
        for i = 1 : numel(screens),
            print_object(screens(i));
            plates = toMatlabList(screens(i).linkedPlateList);
            for j = 1 : numel(plates),
                fprintf(1, '  ');
                print_object(plates(j));
                plateAcquisitions = toMatlabList(plates(j).copyPlateAcquisitions());
                for k = 1 : numel(plateAcquisitions),
                    fprintf(1, '    ');
                    print_object(plateAcquisitions(k));
                end
            end
        end
        fprintf(1, '  Found %g orphaned plates\n', numel(orphanedPlates));
        for i = 1 : numel(orphanedPlates),
            print_object(orphanedPlates(i));
            plateAcquisitions = toMatlabList(orphanedPlates(i).copyPlateAcquisitions());
            for j = 1 : numel(plateAcquisitions),
                fprintf(1, '  ');
                print_object(plateAcquisitions(j));
            end
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the screens owned by the session user across all groups
        disp('Retrieving all screens owned by the session user across all groups')
        allScreensAllGroups = getScreens(session, 'group', -1);
        fprintf(1, '  Found %g screens\n', numel(allScreensAllGroups));
        for i = 1 : numel(allScreensAllGroups),
            print_object(allScreensAllGroups(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the screens owned by the session user in the
        % context of the specified group
        disp('Retrieving screens owned by the session user in a specified group')
        screens = getScreens(session, 'group', groupId);
        fprintf(1, '  Found %g screens\n', numel(screens));
        for i = 1 : numel(screens),
            print_object(screens(i));
        end
        fprintf(1, '\n'); 

-  **Plates**

::

        % Retrieve all the plates owned by the session user.
        disp('Listing plates owned by the session user');
        allPlates = getPlates(session);
        fprintf(1, '  Found %g plates\n', numel(allPlates));
        for i = 1 : numel(allPlates),
            print_object(allPlates(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the plates owned by the session user in the
        % context of the specified group
        disp('Retrieving plates owned by the session user in a specified group')
        plates = getPlates(session, 'group', groupId);
        fprintf(1, '  Found %g plates\n', numel(plates));
        for i = 1 : numel(plates),
            print_object(plates(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve all the plates owned by the session user across all groups
        disp('Retrieving plates owned by the session user across all groups')
        allPlatesAllGroups = getPlates(session, 'group', -1);
        fprintf(1, '  Found %g plates\n', numel(allPlatesAllGroups));
        for i = 1 : numel(allPlatesAllGroups),
            print_object(allPlatesAllGroups(i));
        end
        fprintf(1, '\n'); 

::

        % Retrieve Wells within a Plate, see ScreenPlateWell.
        % Given a plate ID, load the wells.
        % You will have to use the findAllByQuery method.
        fprintf(1, 'Listing wells for plate: %g\n ', plateId);
        wells = session.getQueryService().findAllByQuery(['select well from Well as well left outer join fetch well.plate as pt left outer join fetch well.wellSamples as ws left outer join fetch ws.plateAcquisition as pa left outer join fetch ws.image as img left outer join fetch img.pixels as pix left outer join fetch pix.pixelsType as pt where well.plate.id =  ', num2str(plateId)], []);
        wells = toMatlabList(wells);
        fprintf(1, '  Found %g wells\n ', numel(wells)); 

::

        for i = 1:numel(wells),
            wellSamples = toMatlabList(wells(i).copyWellSamples());
            fprintf(1, '  Well %g - Found %g well samples\n ', i, numel(wellSamples));
            for j = 1:numel(wellSamples),
                pa = wellSamples(j).getPlateAcquisition();
            end
        end 

Raw data access
^^^^^^^^^^^^^^^

::

        % Initialize a client and a session using the ice.config file
        % See ConnectToOMERO for alternative ways to initialize a session
        [client, session] = loadOmero();
        p = parseOmeroProperties(client);
        eventContext = session.getAdminService().getEventContext();
        fprintf(1, 'Created connection to %s\n', p.hostname);
        msg = 'Created session for user %s (id: %g) using group %s (id: %g)\n';
        fprintf(1, msg, char(eventContext.userName), eventContext.userId,...
            char(eventContext.groupName), eventContext.groupId); 

::

        % Information to edit
        imageId = p.imageid; 

::

        % First retrieve the image.
        image = getImages(session, imageId);
        assert(~isempty(image), 'OMERO:RawDataAccess', 'Image Id not valid'); 

::

        % you should only have one pixels set per image.
        fprintf(1, 'Reading image %g\n', image.getId.getValue);
        pixels = image.getPrimaryPixels();
        sizeX = pixels.getSizeX().getValue(); % The number of pixels along the X-axis.
        sizeY = pixels.getSizeY().getValue(); % The number of pixels along the Y-axis.
        sizeZ = pixels.getSizeZ().getValue(); % The number of z-sections.
        sizeC = pixels.getSizeC().getValue(); % The number of channels.
        sizeT = pixels.getSizeT().getValue(); % The number of timepoints.
        fprintf(1, 'Size X: %g\n', sizeX);
        fprintf(1, 'Size Y: %g\n', sizeY);
        fprintf(1, 'Size Z: %g\n', sizeZ);
        fprintf(1, 'Size C: %g\n', sizeC);
        fprintf(1, 'Size T: %g\n', sizeT); 

-  **Plane**

::

        % The following loop initializes a raw pixels store, reads the pixels
        % data and closes the store for each method call
        disp('Reading planes with raw pixels store re-initialization');
        tic
        for z = 0:sizeZ-1,
            for t = 0:sizeT-1,
                for c = 0:sizeC-1,
                    fprintf(1, '  Plane Z: %g, C: %g, T: %g\n', z, c, t);
                    plane = getPlane(session, image, z, c, t);
                end
            end
        end
        toc 

::

        % The following loop initializes a raw pixels store which is re-used in
        % each method call. The store must be closed manually at the end of the
        % loop.
        disp('Reading planes with raw pixels store recycling');
        tic
        [store, pixels] = getRawPixelsStore(session, image);
        for z = 0:sizeZ-1,
            for t = 0:sizeT-1,
                for c = 0:sizeC-1,
                    fprintf(1, '  Plane Z: %g, C: %g, T: %g\n', z, c, t);
                    plane = getPlane(pixels, store, z, c, t);
                end
            end
        end
        store.close();
        toc 

-  **Tile**

::

        % The following loop initializes a raw pixels store, reads the pixels
        % data and closes the store for each method call
        disp('Reading tiles with raw pixels store re-initialization');
        x = 0;
        y = 0;
        width = sizeX/2;
        height = sizeY/2;
        tic
        for z = 0:sizeZ-1,
            for t = 0:sizeT-1,
                for c = 0:sizeC-1,
                    fprintf(1, '  Tile Z: %g, C: %g, T: %g\n', z, c, t);
                    tile = getTile(session, image, z, c, t, x, y, width, height);
                end
            end
        end
        toc 

::

        % The following loop initializes a raw pixels store which is re-used in
        % each method call. The store must be closed manually at the end of the
        % loop.
        disp('Reading tiles with raw pixels store recycling');
        tic
        [store, pixels] = getRawPixelsStore(session, image);
        for z = 0:sizeZ-1,
            for t = 0:sizeT-1,
                for c = 0:sizeC-1,
                    fprintf(1, '  Tile Z: %g, C: %g, T: %g\n', z, c, t);
                    plane = getTile(pixels, store, z, c, t, x, y, width, height);
                end
            end
        end
        store.close();
        toc 

-  **Stack**

::

        % The following loop initializes a raw pixels store, reads the pixels
        % data and closes the store for each method call
        disp('Reading stacks with raw pixels store re-initialization');
        tic
        for t = 0:sizeT-1,
            for c = 0:sizeC-1,
                fprintf(1, '  Stack C: %g, T: %g\n', c, t);
                stack = getStack(session, image, c, t);
            end
        end
        toc 

::

        % The following loop initializes a raw pixels store which is re-used in
        % each method call. The store must be closed manually at the end of the
        % loop.
        disp('Reading stacks with raw pixels store recycling');
        tic
        [store, pixels] = getRawPixelsStore(session, image);
        for t = 0:sizeT-1,
            for c = 0:sizeC-1,
                fprintf(1, '  Stack C: %g, T: %g\n', c, t);
                stack = getStack(pixels, store, c, t);
            end
        end
        store.close();
        toc 

-  **Hypercube**

::

        disp('Reading hypercube'); 

::

        %Create the store to load the stack
        [store, pixels] = getRawPixelsStore(session, image); 

::

        % offset values in each dimension XYZCT
        offset = toJavaList(zeros(1,5), 'java.lang.Integer'); 

::

        % offset values in each dimension XYZCT
        size = toJavaList([sizeX/2 sizeY/2 sizeZ sizeC sizeT],...
            'java.lang.Integer'); 

::

        % indicate the step in each direction, step = 1, will return values at index 0, 1, 2.
        % step = 2, values at index 0, 2, 4 etc.
        step = toJavaList(ones(1,5), 'java.lang.Integer'); 

::

        % Retrieve the data
        store.getHypercube(offset, size, step);
        % close the store
        store.close(); 

Write data
^^^^^^^^^^

::

        % Initialize a client and a session using the ice.config file
        % See ConnectToOMERO for alternative ways to initialize a session
        [client, session] = loadOmero();
        p = parseOmeroProperties(client);
        eventContext = session.getAdminService().getEventContext();
        fprintf(1, 'Created connection to %s\n', p.hostname);
        msg = 'Created session for user %s (id: %g) using group %s (id: %g)\n';
        fprintf(1, msg, char(eventContext.userName), eventContext.userId,...
            char(eventContext.groupName), eventContext.groupId); 

::

        % Information to edit
        group2 = p.group2;
        groupId = session.getAdminService().lookupGroup('training_group-2').getId().getValue(); 

::

        print_object = @(x) fprintf(1, '  %s (id: %d, owner: %d, group: %d)\n',...
            char(x.getName().getValue()), x.getId().getValue(),...
            x.getDetails().getOwner().getId().getValue(),...
            x.getDetails().getGroup().getId().getValue()); 

-  **Create Project/Dataset/Image**

::

        % Create a project/dataset/image
        disp('Creating projects');
        project1 = createProject(session, 'project-1');
        project2 = createProject(session, 'project-1', 'group', groupId);
        print_object(project1);
        print_object(project2);
        disp('Creating datasets linked to projects');
        projectId1 = project1.getId().getValue();
        projectId2 = project2.getId().getValue();
        dataset1 = createDataset(session, 'dataset-1', project1);
        dataset2 = createDataset(session, 'dataset-2', projectId1);
        dataset3 = createDataset(session, 'dataset-1', project2);
        dataset4 = createDataset(session, 'dataset-1', projectId2);
        print_object(dataset1);
        print_object(dataset2);
        print_object(dataset3);
        print_object(dataset4);
        disp('Creating orphaned datasets');
        dataset5 = createDataset(session, 'orphaned dataset-1');
        dataset6 = createDataset(session, 'orphaned dataset-2', 'group', groupId);
        print_object(dataset5)
        print_object(dataset6)
        datasetId1 = dataset1.getId().getValue();
        datasetId2 = dataset2.getId().getValue(); 

::

        disp('Creating screens');
        screen1 = createScreen(session, 'screen-1');
        screen2 = createScreen(session, 'screen-1', 'group', groupId);
        print_object(screen1);
        print_object(screen2);
        disp('Creating plates linked to screens');
        screenId1 = screen1.getId().getValue();
        screenId2 = screen2.getId().getValue();
        plate1 = createPlate(session, 'plate-1', screen1);
        plate2 = createPlate(session, 'plate-2', screenId1);
        plate3 = createPlate(session, 'plate-1', screen2);
        plate4 = createPlate(session, 'plate-2', screenId2);
        print_object(plate1);
        print_object(plate2);
        print_object(plate3);
        print_object(plate4);
        disp('Creating orphaned plates');
        plate5 = createDataset(session, 'orphaned plate-1');
        plate6 = createDataset(session, 'orphaned plate-2', 'group', groupId);
        print_object(plate5)
        print_object(plate6)
        plateId1 = plate1.getId().getValue(); 

::

        image1 = createObject(session, 'image', 'image-1');
        image2 = createObject(session, 'image', 'image-1', 'group', groupId);
        imageId1 = image1.getId().getValue(); 

-  **Create File Annotation**

::

        disp('File annotation');
        % Create a local file
        fprintf(1, 'Creating local file with content: %s\n', fileContent);
        fid = fopen(filePath, 'w');
        fwrite(fid, fileContent);
        fclose(fid); 

::

        % Create a file annotation
        fileAnnotation = writeFileAnnotation(session, filePath,...
            'mimetype', fileMimeType, 'description', fileDescription,...
            'namespace', ns);
        fprintf(1, 'Created file annotation %g (group: %g)\n',...
            fileAnnotation.getId().getValue(),...
            fileAnnotation.getDetails().getGroup().getId().getValue()); 

::

        fid = fopen(filePath, 'w');
        fwrite(fid, fileContent2);
        fclose(fid);
        fileAnnotation2 = writeFileAnnotation(session, filePath,...
            'mimetype', fileMimeType, 'description', fileDescription,...
            'namespace', ns, 'group', groupId);
        fprintf(1, 'Created file annotation %g (group: %g)\n',...
            fileAnnotation2.getId().getValue(),...
            fileAnnotation2.getDetails().getGroup().getId().getValue());
        % Delete the local file
        delete(filePath); 

::

        % Download and read the content of the file annotation
        getFileAnnotationContent(session, fileAnnotation, fileOutputPath);
        fid = fopen(fileOutputPath, 'r');
        readContent = fread(fid);
        fclose(fid);
        fprintf(1, 'Reading content of file annotation %g: %s\n',...
            fileAnnotation.getId().getValue(), readContent);
        delete(fileOutputPath); 

::

        % Download and read the content of the file annotation
        getFileAnnotationContent(session, fileAnnotation2, fileOutputPath);
        fid = fopen(fileOutputPath, 'r');
        readContent = fread(fid);
        fclose(fid);
        fprintf(1, 'Reading content of file annotation %g: %s\n',...
            fileAnnotation2.getId().getValue(), readContent);
        delete(fileOutputPath); 

::

        % Update the file annotation on the server
        disp('Updating file annotations with new content');
        fid = fopen(filePath, 'w');
        fwrite(fid, newFileContent);
        fclose(fid);
        fileAnnotation = updateFileAnnotation(session, fileAnnotation, filePath,...
            'description', newFileDescription);
        fid = fopen(filePath, 'w');
        fwrite(fid, newFileContent2);
        fclose(fid);
        fileAnnotation2 = updateFileAnnotation(session, fileAnnotation2, filePath,...
            'description', newFileDescription);
        delete(filePath); 

::

        % Read the content of the updated file annotation
        getFileAnnotationContent(session, fileAnnotation, fileOutputPath);
        fid = fopen(fileOutputPath, 'r');
        readContent = fread(fid);
        fclose(fid);
        fprintf(1, 'Reading content of updated file annotation %g: %s\n',...
            fileAnnotation.getId().getValue(), readContent);
        delete(fileOutputPath); 

::

        getFileAnnotationContent(session, fileAnnotation2, fileOutputPath);
        fid = fopen(fileOutputPath, 'r');
        readContent = fread(fid);
        fclose(fid);
        fprintf(1, 'Reading content of updated file annotation %g: %s\n',...
            fileAnnotation2.getId().getValue(), readContent);
        delete(fileOutputPath); 

::

        % Project - Annotation link
        fa = omero.model.FileAnnotationI(fileAnnotation.getId().getValue(), false);
        linkAnnotation(session, fa, 'project', projectId1);
        fprintf(1, 'Linked file annotation to project %g\n', projectId1);
        fprintf(1, 'Retrieving file annotations attached to project %g with namespace %s\n',...
            projectId1, ns);
        fas = getProjectFileAnnotations(session, projectId1, 'include', ns);
        assert(hasAnnotation(fa, fas), 'WriteData: Could not find annotation'); 

::

        % Dataset - Annotation link
        linkAnnotation(session, fa, 'dataset', datasetId1);
        fprintf(1, 'Linked file annotation to dataset %g\n', datasetId1);
        fprintf(1, 'Retrieving file annotations attached to dataset %g with namespace %s\n',...
            datasetId1, ns);
        fas = getDatasetFileAnnotations(session, datasetId1, 'include', ns);
        assert(hasAnnotation(fa, fas), 'WriteData: Could not find annotation'); 

::

        % Image - Annotation link
        linkAnnotation(session, fa, 'image', imageId1);
        fprintf(1, 'Linked file annotation to image %g\n', imageId1);
        fprintf(1, 'Retrieving file annotations attached to image %g with namespace %s\n',...
            imageId1, ns);
        fas = getImageFileAnnotations(session, imageId1, 'include', ns);
        assert(hasAnnotation(fa, fas), 'WriteData: Could not find annotation'); 

::

        % Plate - Annotation link
        linkAnnotation(session, fa, 'plate', plateId1);
        fprintf(1, 'Linked file annotation to plate %g\n', plateId1);
        fprintf(1, 'Retrieving file annotations attached to plate %g with namespace %s\n',...
            plateId1, ns);
        fas = getPlateFileAnnotations(session, plateId1, 'include', ns);
        assert(hasAnnotation(fa, fas), 'WriteData: Could not find annotation'); 

::

        % Screen - Annotation link
        linkAnnotation(session, fa, 'screen', screenId1);
        fprintf(1, 'Linked file annotation to screen %g\n', screenId1);
        fprintf(1, 'Retrieving file annotations attached to screen %g with namespace %s\n',...
            screenId1, ns);
        fas = getScreenFileAnnotations(session, screenId1, 'include', ns);
        assert(hasAnnotation(fa, fas), 'WriteData: Could not find annotation'); 

-  **Create Comment Annotation**

::

        disp('Comment annotation'); 

::

        disp('Creating comment annotations');
        commentAnnotation1 = writeCommentAnnotation(session, 'comment',...
            'description', 'comment description', 'namespace', ns);
        commentAnnotation2 = writeCommentAnnotation(session, 'comment',...
            'description', 'comment description', 'namespace', ns, 'group', groupId);
        print_long = @(x) fprintf(1, '  %s (id: %d, owner: %d, group: %d)\n',...
            char(x.getTextValue().getValue()), x.getId().getValue(),...
            x.getDetails().getOwner().getId().getValue(),...
            x.getDetails().getGroup().getId().getValue());
        print_long(commentAnnotation1);
        print_long(commentAnnotation2); 

::

        disp('Retrieving comment annotations');
        annotation = getCommentAnnotations(session,...
            commentAnnotation1.getId().getValue());
        assert(~isempty(annotation), 'WriteData: Could not find annotation'); 

::

        % Project - Annotation link
        ca = omero.model.CommentAnnotationI(commentAnnotation1.getId().getValue(), false);
        linkAnnotation(session, ca, 'project', projectId1);
        fprintf(1, 'Linked comment annotation to project %g\n', projectId1);
        fprintf(1, 'Retrieving comment annotations attached to project %g with namespace %s\n',...
            projectId1, ns);
        cas = getProjectCommentAnnotations(session, projectId1, 'include', ns);
        assert(hasAnnotation(ca, cas), 'WriteData: Could not find annotation'); 

::

        % Dataset - Annotation link
        linkAnnotation(session, ca, 'dataset', datasetId1);
        fprintf(1, 'Linked comment annotation to dataset %g\n', datasetId1);
        fprintf(1, 'Retrieving comment annotations attached to dataset %g with namespace %s\n',...
            datasetId1, ns);
        cas = getDatasetCommentAnnotations(session, datasetId1, 'include', ns);
        assert(hasAnnotation(ca, cas), 'WriteData: Could not find annotation'); 

::

        % Image - Annotation link
        linkAnnotation(session, ca, 'image', imageId1);
        fprintf(1, 'Linked comment annotation to image %g\n', imageId1);
        fprintf(1, 'Retrieving comment annotations attached to image %g with namespace %s\n',...
            imageId1, ns);
        cas = getImageCommentAnnotations(session, imageId1, 'include', ns);
        assert(hasAnnotation(ca, cas), 'WriteData: Could not find annotation'); 

::

        % Plate - Annotation link
        linkAnnotation(session, ca, 'plate', plateId1);
        fprintf(1, 'Linked comment annotation to plate %g\n', plateId1);
        fprintf(1, 'Retrieving comment annotations attached to plate %g with namespace %s\n',...
            plateId1, ns);
        cas = getPlateCommentAnnotations(session, plateId1, 'include', ns);
        assert(hasAnnotation(ca, cas), 'WriteData: Could not find annotation'); 

::

        % Screen - Annotation link
        linkAnnotation(session, ca, 'screen', screenId1);
        fprintf(1, 'Linked comment annotation to screen %g\n', screenId1);
        fprintf(1, 'Retrieving comment annotations attached to screen %g with namespace %s\n',...
            screenId1, ns);
        cas = getScreenCommentAnnotations(session, screenId1, 'include', ns);
        assert(hasAnnotation(ca, cas), 'WriteData: Could not find annotation'); 

-  **Create Double Annotation**

::

        disp('Double annotation'); 

::

        disp('Creating double annotations');
        doubleAnnotation1 = writeDoubleAnnotation(session, .5,...
            'description', 'double description', 'namespace', ns);
        doubleAnnotation2 = writeDoubleAnnotation(session, .5,...
            'description', 'double description', 'namespace', ns, 'group', groupId);
        print_long = @(x) fprintf(1, '  %g (id: %d, owner: %d, group: %d)\n',...
            x.getDoubleValue().getValue(), x.getId().getValue(),...
            x.getDetails().getOwner().getId().getValue(),...
            x.getDetails().getGroup().getId().getValue());
        print_long(doubleAnnotation1);
        print_long(doubleAnnotation2); 

::

        disp('Retrieving double annotations');
        annotation = getDoubleAnnotations(session,...
            doubleAnnotation1.getId().getValue());
        assert(~isempty(annotation), 'WriteData: Could not find annotation'); 

::

        % Project - Annotation link
        da = omero.model.DoubleAnnotationI(doubleAnnotation1.getId().getValue(), false);
        linkAnnotation(session, da, 'project', projectId1);
        fprintf(1, 'Linked double annotation to project %g\n', projectId1);
        fprintf(1, 'Retrieving double annotations attached to project %g with namespace %s\n',...
            projectId1, ns);
        das = getProjectDoubleAnnotations(session, projectId1, 'include', ns);
        assert(hasAnnotation(da, das), 'WriteData: Could not find annotation'); 

::

        % Dataset - Annotation link
        linkAnnotation(session, da, 'dataset', datasetId1);
        fprintf(1, 'Linked double annotation to dataset %g\n', datasetId1);
        fprintf(1, 'Retrieving double annotations attached to dataset %g with namespace %s\n',...
            datasetId1, ns);
        das = getDatasetDoubleAnnotations(session, datasetId1, 'include', ns);
        assert(hasAnnotation(da, das), 'WriteData: Could not find annotation'); 

::

        % Image - Annotation link
        linkAnnotation(session, da, 'image', imageId1);
        fprintf(1, 'Linked double annotation to image %g\n', imageId1);
        fprintf(1, 'Retrieving double annotations attached to image %g with namespace %s\n',...
            imageId1, ns);
        das = getImageDoubleAnnotations(session, imageId1, 'include', ns);
        assert(hasAnnotation(da, das), 'WriteData: Could not find annotation'); 

::

        % Plate - Annotation link
        linkAnnotation(session, da, 'plate', plateId1);
        fprintf(1, 'Linked double annotation to plate %g\n', plateId1);
        fprintf(1, 'Retrieving double annotations attached to plate %g with namespace %s\n',...
            plateId1, ns);
        das = getPlateDoubleAnnotations(session, plateId1, 'include', ns);
        assert(hasAnnotation(da, das), 'WriteData: Could not find annotation'); 

::

        % Screen - Annotation link
        linkAnnotation(session, da, 'screen', screenId1);
        fprintf(1, 'Linked double annotation to screen %g\n', screenId1);
        fprintf(1, 'Retrieving double annotations attached to screen %g with namespace %s\n',...
            screenId1, ns);
        das = getScreenDoubleAnnotations(session, screenId1, 'include', ns);
        assert(hasAnnotation(da, das), 'WriteData: Could not find annotation'); 

-  **Create Long Annotation**

::

        disp('Long annotation'); 

::

        disp('Creating long annotations');
        longAnnotation1 = writeLongAnnotation(session, 1,...
            'description', 'long description', 'namespace', ns);
        longAnnotation2 = writeLongAnnotation(session, 1,...
            'description', 'long description', 'namespace', ns, 'group', groupId);
        print_long = @(x) fprintf(1, '  %g (id: %d, owner: %d, group: %d)\n',...
            char(x.getLongValue().getValue()), x.getId().getValue(),...
            x.getDetails().getOwner().getId().getValue(),...
            x.getDetails().getGroup().getId().getValue());
        print_long(longAnnotation1);
        print_long(longAnnotation2); 

::

        disp('Retrieving long annotations');
        annotation = getLongAnnotations(session,...
            longAnnotation1.getId().getValue());
        assert(~isempty(annotation), 'WriteData: Could not find annotation'); 

::

        % Project - Annotation link
        la = omero.model.LongAnnotationI(longAnnotation1.getId().getValue(), false);
        linkAnnotation(session, la, 'project', projectId1);
        fprintf(1, 'Linked long annotation to project %g\n', projectId1);
        fprintf(1, 'Retrieving long annotations attached to project %g with namespace %s\n',...
            projectId1, ns);
        las = getProjectLongAnnotations(session, projectId1, 'include', ns);
        assert(hasAnnotation(la, las), 'WriteData: Could not find annotation'); 

::

        % Dataset - Annotation link
        linkAnnotation(session, la, 'dataset', datasetId1);
        fprintf(1, 'Linked long annotation to dataset %g\n', datasetId1);
        fprintf(1, 'Retrieving long annotations attached to dataset %g with namespace %s\n',...
            datasetId1, ns);
        las = getDatasetLongAnnotations(session, datasetId1, 'include', ns);
        assert(hasAnnotation(la, las), 'WriteData: Could not find annotation'); 

::

        % Image - Annotation link
        linkAnnotation(session, la, 'image', imageId1);
        fprintf(1, 'Linked long annotation to image %g\n', imageId1);
        fprintf(1, 'Retrieving long annotations attached to image %g with namespace %s\n',...
            imageId1, ns);
        las = getImageLongAnnotations(session, imageId1, 'include', ns);
        assert(hasAnnotation(la, las), 'WriteData: Could not find annotation'); 

::

        % Plate - Annotation link
        linkAnnotation(session, la, 'plate', plateId1);
        fprintf(1, 'Linked long annotation to plate %g\n', plateId1);
        fprintf(1, 'Retrieving long annotations attached to plate %g with namespace %s\n',...
            plateId1, ns);
        las = getPlateLongAnnotations(session, plateId1, 'include', ns);
        assert(hasAnnotation(la, las), 'WriteData: Could not find annotation'); 

::

        % Screen - Annotation link
        linkAnnotation(session, la, 'screen', screenId1);
        fprintf(1, 'Linked long annotation to screen %g\n', screenId1);
        fprintf(1, 'Retrieving long annotations attached to screen %g with namespace %s\n',...
            screenId1, ns);
        las = getScreenLongAnnotations(session, screenId1, 'include', ns);
        assert(hasAnnotation(la, las), 'WriteData: Could not find annotation'); 

-  **Create Map Annotation**

::

        disp('Map annotation'); 

::

        disp('Creating map annotations');
        mapAnnotation1 = writeMapAnnotation(session, 'key', 'value',...
            'description', 'map description', 'namespace', ns);
        mapAnnotation2 = writeMapAnnotation(session, 'key', 'value',...
            'description', 'map description', 'namespace', ns, 'group', groupId);
        print_map = @(x) fprintf(1, '  %s (id: %d, owner: %d, group: %d)\n',...
            char(x.getMapValueAsMap), x.getId().getValue(),...
            x.getDetails().getOwner().getId().getValue(),...
            x.getDetails().getGroup().getId().getValue());
        print_map(mapAnnotation1);
        print_map(mapAnnotation2); 

::

        disp('Retrieving map annotations');
        annotation = getAnnotations(session,...
            mapAnnotation1.getId().getValue(), 'map');
        assert(~isempty(annotation), 'WriteData: Could not find annotation'); 

::

        % Project - Annotation link
        ma = omero.model.MapAnnotationI(mapAnnotation1.getId().getValue(), false);
        linkAnnotation(session, ma, 'project', projectId1);
        fprintf(1, 'Linked map annotation to project %g\n', projectId1);
        fprintf(1, 'Retrieving map annotations attached to project %g with namespace %s\n',...
            projectId1, ns);
        mas = getObjectAnnotations(session, 'map', 'project', projectId1, 'include', ns);
        assert(hasAnnotation(ma, mas), 'WriteData: Could not find annotation'); 

::

        % Dataset - Annotation link
        linkAnnotation(session, ma, 'dataset', datasetId1);
        fprintf(1, 'Linked map annotation to dataset %g\n', datasetId1);
        fprintf(1, 'Retrieving map annotations attached to dataset %g with namespace %s\n',...
            datasetId1, ns);
        mas = getObjectAnnotations(session, 'map', 'dataset', datasetId1, 'include', ns);
        assert(hasAnnotation(ma, mas), 'WriteData: Could not find annotation'); 

::

        % Image - Annotation link
        linkAnnotation(session, ma, 'image', imageId1);
        fprintf(1, 'Linked map annotation to image %g\n', imageId1);
        fprintf(1, 'Retrieving map annotations attached to image %g with namespace %s\n',...
            imageId1, ns);
        mas = getObjectAnnotations(session, 'map', 'image', imageId1, 'include', ns);
        assert(hasAnnotation(ma, mas), 'WriteData: Could not find annotation'); 

::

        % Plate - Annotation link
        linkAnnotation(session, ma, 'plate', plateId1);
        fprintf(1, 'Linked map annotation to plate %g\n', plateId1);
        fprintf(1, 'Retrieving map annotations attached to plate %g with namespace %s\n',...
            plateId1, ns);
        mas = getObjectAnnotations(session, 'map', 'plate', plateId1, 'include', ns);
        assert(hasAnnotation(ma, mas), 'WriteData: Could not find annotation'); 

::

        % Screen - Annotation link
        linkAnnotation(session, ma, 'screen', screenId1);
        fprintf(1, 'Linked map annotation to screen %g\n', screenId1);
        fprintf(1, 'Retrieving map annotations attached to screen %g with namespace %s\n',...
            screenId1, ns);
        mas = getObjectAnnotations(session, 'map', 'screen', screenId1, 'include', ns);
        assert(hasAnnotation(ma, mas), 'WriteData: Could not find annotation'); 

-  **Create Tag Annotation**

::

        disp('Tag annotation'); 

::

        disp('Creating tag annotations');
        tagAnnotation1 = writeTagAnnotation(session, 'tag value',...
            'description', 'tag description', 'namespace', ns);
        tagAnnotation2 = writeTagAnnotation(session, 'tag value',...
            'description', 'tag description', 'namespace', ns, 'group', groupId);
        print_tag = @(x) fprintf(1, '  %s (id: %d, owner: %d, group: %d)\n',...
            char(x.getTextValue().getValue()), x.getId().getValue(),...
            x.getDetails().getOwner().getId().getValue(),...
            x.getDetails().getGroup().getId().getValue());
        print_tag(tagAnnotation1);
        print_tag(tagAnnotation2); 

::

        disp('Retrieving tag annotations');
        annotation = getTagAnnotations(session,...
            tagAnnotation1.getId().getValue());
        assert(~isempty(annotation), 'WriteData: Could not find annotation'); 

::

        % Project - Annotation link
        ta = omero.model.TagAnnotationI(tagAnnotation1.getId().getValue(), false);
        linkAnnotation(session, ta, 'project', projectId1);
        fprintf(1, 'Linked tag annotation to project %g\n', projectId1);
        fprintf(1, 'Retrieving tag annotations attached to project %g with namespace %s\n',...
            projectId1, ns);
        tas = getProjectTagAnnotations(session, projectId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

::

        % Dataset - Annotation link
        linkAnnotation(session, ta, 'dataset', datasetId1);
        fprintf(1, 'Linked tag annotation to dataset %g\n', datasetId1);
        fprintf(1, 'Retrieving tag annotations attached to dataset %g with namespace %s\n',...
            datasetId1, ns);
        tas = getDatasetTagAnnotations(session, datasetId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

::

        % Image - Annotation link
        linkAnnotation(session, ta, 'image', imageId1);
        fprintf(1, 'Linked tag annotation to image %g\n', imageId1);
        fprintf(1, 'Retrieving tag annotations attached to image %g with namespace %s\n',...
            imageId1, ns);
        tas = getImageTagAnnotations(session, imageId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

::

        % Plate - Annotation link
        linkAnnotation(session, ta, 'plate', plateId1);
        fprintf(1, 'Linked tag annotation to plate %g\n', plateId1);
        fprintf(1, 'Retrieving tag annotations attached to plate %g with namespace %s\n',...
            plateId1, ns);
        tas = getPlateTagAnnotations(session, plateId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

::

        % Screen - Annotation link
        linkAnnotation(session, ta, 'screen', screenId1);
        fprintf(1, 'Linked tag annotation to screen %g\n', screenId1);
        fprintf(1, 'Retrieving tag annotations attached to screen %g with namespace %s\n',...
            screenId1, ns);
        tas = getScreenTagAnnotations(session, screenId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

-  **Create Timestamp Annotation**

::

        disp('Timestamp annotation'); 

::

        disp('Creating timestamp annotations');
        timestampAnnotation1 = writeTimestampAnnotation(session, now,...
            'description', 'timestamp description', 'namespace', ns);
        timestampAnnotation2 = writeTimestampAnnotation(session, now,...
            'description', 'timestamp description', 'namespace', ns, 'group', groupId);
        print_ts = @(x) fprintf(1, '  %g (id: %d, owner: %d, group: %d)\n',...
            x.getTimeValue().getValue(), x.getId().getValue(),...
            x.getDetails().getOwner().getId().getValue(),...
            x.getDetails().getGroup().getId().getValue());
        print_ts(timestampAnnotation1);
        print_ts(timestampAnnotation2); 

::

        disp('Retrieving timestamp annotations');
        annotation = getTimestampAnnotations(session,...
            timestampAnnotation1.getId().getValue());
        assert(~isempty(annotation), 'WriteData: Could not find annotation'); 

::

        % Project - Annotation link
        ta = omero.model.TimestampAnnotationI(timestampAnnotation1.getId().getValue(), false);
        linkAnnotation(session, ta, 'project', projectId1);
        fprintf(1, 'Linked timestamp annotation to project %g\n', projectId1);
        fprintf(1, 'Retrieving timestamp annotations attached to project %g with namespace %s\n',...
            projectId1, ns);
        tas = getProjectTimestampAnnotations(session, projectId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

::

        % Dataset - Annotation link
        linkAnnotation(session, ta, 'dataset', datasetId1);
        fprintf(1, 'Linked timestamp annotation to dataset %g\n', datasetId1);
        fprintf(1, 'Retrieving timestamp annotations attached to dataset %g with namespace %s\n',...
            datasetId1, ns);
        tas = getDatasetTimestampAnnotations(session, datasetId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

::

        % Image - Annotation link
        linkAnnotation(session, ta, 'image', imageId1);
        fprintf(1, 'Linked timestamp annotation to image %g\n', imageId1);
        fprintf(1, 'Retrieving timestamp annotations attached to image %g with namespace %s\n',...
            imageId1, ns);
        tas = getImageTimestampAnnotations(session, imageId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

::

        % Plate - Annotation link
        linkAnnotation(session, ta, 'plate', plateId1);
        fprintf(1, 'Linked timestamp annotation to plate %g\n', plateId1);
        fprintf(1, 'Retrieving timestamp annotations attached to plate %g with namespace %s\n',...
            plateId1, ns);
        tas = getPlateTimestampAnnotations(session, plateId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

::

        % Screen - Annotation link
        linkAnnotation(session, ta, 'screen', screenId1);
        fprintf(1, 'Linked timestamp annotation to screen %g\n', screenId1);
        fprintf(1, 'Retrieving timestamp annotations attached to screen %g with namespace %s\n',...
            screenId1, ns);
        tas = getScreenTimestampAnnotations(session, screenId1, 'include', ns);
        assert(hasAnnotation(ta, tas), 'WriteData: Could not find annotation'); 

-  **Create XML Annotation**

::

        disp('XML annotation'); 

::

        disp('Creating XML annotations');
        xmlAnnotation1 = writeXmlAnnotation(session, 'xml value',...
            'description', 'xml description', 'namespace', ns);
        xmlAnnotation2 = writeXmlAnnotation(session, 'xml value',...
            'description', 'xml description', 'namespace', ns, 'group', groupId);
        print_timestamp = @(x) fprintf(1, '  %s (id: %d, owner: %d, group: %d)\n',...
            char(x.getTextValue().getValue()), x.getId().getValue(),...
            x.getDetails().getOwner().getId().getValue(),...
            x.getDetails().getGroup().getId().getValue());
        print_timestamp(xmlAnnotation1);
        print_timestamp(xmlAnnotation2); 

::

        disp('Retrieving XML annotations');
        annotation = getXmlAnnotations(session,...
            xmlAnnotation1.getId().getValue());
        assert(~isempty(annotation), 'WriteData: Could not find annotation'); 

::

        % Project - Annotation link
        xa = omero.model.XmlAnnotationI(xmlAnnotation1.getId().getValue(), false);
        linkAnnotation(session, xa, 'project', projectId1);
        fprintf(1, 'Linked XML annotation to project %g\n', projectId1);
        fprintf(1, 'Retrieving XML annotations attached to project %g with namespace %s\n',...
            projectId1, ns);
        xas = getProjectXmlAnnotations(session, projectId1, 'include', ns);
        assert(hasAnnotation(xa, xas), 'WriteData: Could not find annotation'); 

::

        % Dataset - Annotation link
        linkAnnotation(session, xa, 'dataset', datasetId1);
        fprintf(1, 'Linked XML annotation to dataset %g\n', datasetId1);
        fprintf(1, 'Retrieving XML annotations attached to dataset %g with namespace %s\n',...
            datasetId1, ns);
        xas = getDatasetXmlAnnotations(session, datasetId1, 'include', ns);
        assert(hasAnnotation(xa, xas), 'WriteData: Could not find annotation'); 

::

        % Image - Annotation link
        linkAnnotation(session, xa, 'image', imageId1);
        fprintf(1, 'Linked XML annotation to image %g\n', imageId1);
        fprintf(1, 'Retrieving XML annotations attached to image %g with namespace %s\n',...
            imageId1, ns);
        xas = getImageXmlAnnotations(session, imageId1, 'include', ns);
        assert(hasAnnotation(xa, xas), 'WriteData: Could not find annotation'); 

::

        % Plate - Annotation link
        linkAnnotation(session, xa, 'plate', plateId1);
        fprintf(1, 'Linked XML annotation to plate %g\n', plateId1);
        fprintf(1, 'Retrieving XML annotations attached to plate %g with namespace %s\n',...
            plateId1, ns);
        xas = getPlateXmlAnnotations(session, plateId1, 'include', ns);
        assert(hasAnnotation(xa, xas), 'WriteData: Could not find annotation'); 

::

        % Screen - Annotation link
        linkAnnotation(session, xa, 'screen', screenId1);
        fprintf(1, 'Linked XML annotation to screen %g\n', screenId1);
        fprintf(1, 'Retrieving XML annotations attached to screen %g with namespace %s\n',...
            screenId1, ns);
        xas = getScreenXmlAnnotations(session, screenId1, 'include', ns);
        assert(hasAnnotation(xa, xas), 'WriteData: Could not find annotation'); 

ROIs
^^^^

::

        % Initialize a client and a session using the ice.config file
        % See ConnectToOMERO for alternative ways to initialize a session
        [client, session] = loadOmero();
        p = parseOmeroProperties(client);
        eventContext = session.getAdminService().getEventContext();
        fprintf(1, 'Created connection to %s\n', p.hostname);
        msg = 'Created session for user %s (id: %g) using group %s (id: %g)\n';
        fprintf(1, msg, char(eventContext.userName), eventContext.userId,...
            char(eventContext.groupName), eventContext.groupId); 

::

        % Information to edit
        imageId = p.imageid; 

::

        % Load image
        image = getImages(session, imageId);
        assert(~isempty(image), 'OMERO:ROIs', 'Image id not valid'); 

-  **Create shapes**

::

        % Create a rectangle
        disp('Create rectangular shape');
        rectangle = createRectangle(0, 0, 10, 20);
        rectangle.setFillColor(rint(hex2dec('7DFF0000')));    % 'aRGB' - 50% red
        rectangle.setStrokeColor(rint(hex2dec('FF000000')));  % 'aRGB' - 100% black
        rectangle.setTextValue(rstring('Rectangle'));
        % indicate on which plane to attach the shape
        rectangle = setShapeCoordinates(rectangle, 0, 0, 0); 

::

        % Create an ellipse
        disp('Create ellipsoidal shape');
        ellipse = createEllipse(10, 10, 10, 10);
        ellipse.setFillColor(rint(hex2dec('7D0000FF')));    % 'aRGB' - 50% blue
        ellipse.setStrokeColor(rint(hex2dec('FF000000')));  % 'aRGB' - 100% black
        ellipse.setTextValue(rstring('Ellipse'));
        % indicate on which plane to attach the shape
        ellipse = setShapeCoordinates(ellipse, 0, 0, 1); 

::

        % Create a point
        disp('Create point shape');
        point = createPoint(5, 4);
        point.setTextValue(rstring('Point'));
        % indicate on which plane to attach the shape
        point = setShapeCoordinates(point, 0, 0, 2); 

::

        % Create a line
        disp('Create line shape');
        line = createLine([10 15], [10 20]);
        line.setStrokeColor(rint(hex2dec('FF000000')));  % 'aRGB' - 100% black
        line.setTextValue(rstring('Line'));
        % indicate on which plane to attach the shape
        line = setShapeCoordinates(line, 0, 0, 3); 

::

        % Create a polyline
        disp('Create polyline shape');
        polyline = createPolyline([1 5 10 8], [1 5 5 10]);
        polyline.setStrokeColor(rint(hex2dec('FF000000')));  % 'aRGB' - 100% black
        polyline.setTextValue(rstring('Polyline'));
        % indicate on which plane to attach the shape
        polyline = setShapeCoordinates(polyline, 0, 0, 4); 

::

        % Create a polygon
        disp('Create polygon shape');
        polygon = createPolygon([1 5 10 8], [1 5 5 10]);
        polygon.setStrokeColor(rint(hex2dec('FF000000')));  % 'aRGB' - 100% black
        polygon.setTextValue(rstring('Polygon'));
        % indicate on which plane to attach the shape
        polygon = setShapeCoordinates(polygon, 0, 0, 5); 

::

        % Create the roi.
        roi = omero.model.RoiI;
        % Attach the shape to the roi, several shapes can be added.
        roi.addShape(rectangle);
        roi.addShape(ellipse);
        roi.addShape(point);
        roi.addShape(line);
        roi.addShape(polyline);
        roi.addShape(polygon);
        % Link the roi and the image
        roi.setImage(omero.model.ImageI(imageId, false));
        % Save the ROI
        roi = session.getUpdateService().saveAndReturnObject(roi);
        fprintf(1, 'Created ROI %g\n', roi.getId().getValue()); 

::

        % Check that the shapes have been added.
        fprintf(1, 'Reading shapes attached to ROI %g\n', roi.getId().getValue());
        nShapes = roi.sizeOfShapes;
        fprintf(1, 'Found %g shapes\n', nShapes);
        for i = 1 : nShapes
            shape = roi.getShape(i - 1);
            if (isa(shape, 'omero.model.Rectangle'))
                %handle rectangle
                x = shape.getX().getValue();
                y = shape.getY().getValue();
                width = shape.getWidth().getValue();
                height = shape.getHeight().getValue();
                fprintf(1, '  Rectangle x: %g, y: %g, width: %g, height: %g\n',...
                    x, y, width, height);
            elseif (isa(shape, 'omero.model.Ellipse'))
                cx = shape.getCx().getValue();
                cy = shape.getCy().getValue();
                rx = shape.getRx().getValue();
                ry = shape.getRy().getValue();
                fprintf(1, '  Ellipse x: %g, y: %g, rx: %g, ry: %g\n',...
                    cx, cy, rx, ry);
            elseif (isa(shape, 'omero.model.Point'))
                cx = shape.getCx().getValue();
                cy = shape.getCy().getValue();
                fprintf(1, '  Point x: %g, y: %g\n', cx, cy);
            elseif (isa(shape, 'omero.model.Line'))
                x1 = shape.getX1().getValue();
                x2 = shape.getX2().getValue();
                y1 = shape.getY1().getValue();
                y2 = shape.getY2().getValue();
                fprintf(1, '  Line (x1, y1): (%g, %g), (x2, y2): (%g, %g)\n',...
                    x1, y1, x2, y2);
            elseif isa(shape, 'omero.model.Polyline')
                points = shape.getPoints().getValue();
                fprintf(1, '  Poyline: %s\n', char(points));
            elseif (isa(shape, 'omero.model.Polygon'))
                points = shape.getPoints().getValue();
                fprintf(1, '  Polygon: %s\n', char(points));
            end
        end 

::

        % Create a mask covering half of the image
        pixels = image.getPrimaryPixels();
        sizeX = pixels.getSizeX().getValue();
        sizeY = pixels.getSizeY().getValue();
        m = false(sizeY, sizeX / 2);
        m(end/4:3*end/4,end/2:end)=true;
        mask = createMask(m);
        setShapeCoordinates(mask, 0, 0, 0);
        roi = omero.model.RoiI();
        roi.addShape(mask);
        roi.setImage(omero.model.ImageI(imageId, false));
        roi = session.getUpdateService().saveAndReturnObject(roi);
        fprintf(1, 'Created ROI %g\n', roi.getId().getValue()); 

::

        % Create a mask shape at a position different from (0, 0)
        m = true(sizeY/8 - 4, sizeX/8 - 4);
        m(end/4 : 3 * end/4, end/4 : 3 * end/4) = false;
        mask = createMask(5 * sizeY / 8, 5 * sizeX/8, m);
        setShapeCoordinates(mask, 0, 0, 0);
        roi = omero.model.RoiI();
        roi.addShape(mask);
        roi.setImage(omero.model.ImageI(imageId, false));
        roi = session.getUpdateService().saveAndReturnObject(roi);
        fprintf(1, 'Created ROI %g\n', roi.getId().getValue()); 

Delete data
^^^^^^^^^^^

::

        % Initialize a client and a session using the ice.config file
        % See ConnectToOMERO for alternative ways to initialize a session
        [client, session] = loadOmero();
        p = parseOmeroProperties(client);
        eventContext = session.getAdminService().getEventContext();
        fprintf(1, 'Created connection to %s\n', p.hostname);
        msg = 'Created session for user %s (id: %g) using group %s (id: %g)\n';
        fprintf(1, msg, char(eventContext.userName), eventContext.userId,...
            char(eventContext.groupName), eventContext.groupId); 

-  **Delete Image**

::

        % Delete Image. In the following example, we create an image and delete it.
        % First create the image.
        image = omero.model.ImageI;
        image.setName(rstring('image name'))
        image = session.getUpdateService().saveAndReturnObject(image);
        imageId = image.getId().getValue(); 

::

        % Check the image has been created
        image = getImages(session, imageId);
        assert(~isempty(image), 'OMERO:LoadMetadataAdvanced', 'Image Id not valid');
        fprintf(1, 'Image %g created\n', imageId); 

::

        %Create ROI. In this example, we create an ROI with a rectangular shape and
        %attach it to an image to then test deleting the ROIs. 

::

        % First create a rectangular shape
        disp('Create rectangular and point shape');
        rectangle = createRectangle(0, 0, 10, 20);
        rectangle = setShapeCoordinates(rectangle, 0, 0, 0);
        point = createPoint(0, 0);
        point = setShapeCoordinates(point, 0, 0, 0); 

::

        % Create the roi.
        roi = omero.model.RoiI;
        % Attach the shape to the roi, several shapes can be added.
        roi.addShape(rectangle);
        roi.addShape(point);
        % Link the roi and the image
        roi.setImage(omero.model.ImageI(imageId, false));
        % Save the ROI
        roi = session.getUpdateService().saveAndReturnObject(roi);
        fprintf(1, 'Created ROI %g\n', roi.getId().getValue()); 

::

        % Retrieve the roi linked to an image.
        fprintf(1, 'Reading ROIs attached to image %g\n', imageId);
        roiResult =  session.getRoiService().findByImage(imageId, []);
        rois = toMatlabList(roiResult.rois);
        fprintf(1, 'Found %g ROI(s)\n', numel(rois)); 

::

        % Remove all the shapes from the first ROI
        roi = rois(1);
        shapes = roi.copyShapes();
        if (shapes.size > 0)
            fprintf(1, '  Removing %g shapes\n', shapes.size);
            for j = 1 : shapes.size
                roi.removeShape(shapes.get(j-1));
            end
            roi = session.getUpdateService().saveAndReturnObject(roi);
        end 

::

        % Delete ROI
        fprintf(1, 'Deleting ROI %g\n', roi.getId().getValue());
        targetObj = java.util.Hashtable;
        targetObj.put('ROI', toJavaList(roi.getId().getValue(), 'java.lang.Long'));
        deleteCommand = omero.cmd.Delete2(targetObj, [], false);
        session.submit(deleteCommand); 

::

        % Delete the image. You can delete more than one image at a time.
        fprintf(1, 'Deleting image %g\n', imageId);
        deleteImages(session, imageId); 

::

        % Check the image has been deleted
        pause(5)
        image = getImages(session, imageId);
        assert(isempty(image), 'OMERO:LoadMetadataAdvanced', 'Image not deleted');
        fprintf(1, 'Image %g deleted\n', imageId); 

Render Images
^^^^^^^^^^^^^

::

        % Create a connection
        [client, session] = loadOmero();
        p = parseOmeroProperties(client);
        eventContext = session.getAdminService().getEventContext();
        fprintf(1, 'Created connection to %s\n', p.hostname);
        msg = 'Created session for user %s (id: %g) using group %s (id: %g)\n';
        fprintf(1, msg, char(eventContext.userName), eventContext.userId,...
            char(eventContext.groupName), eventContext.groupId); 

::

        % Information to edit
        imageId = p.imageid; 

::

        % Load image acquisition data.
        fprintf(1, 'Reading image: %g\n', imageId);
        image = getImages(session, imageId);
        assert(~isempty(image), 'OMERO:RenderImages', 'Image Id not valid');
        pixels = image.getPrimaryPixels();
        pixelsId = pixels.getId().getValue(); 

-  **Create rendering engine**

::

        % Follow an example indicating, how to create a rendering engine.
        disp('Rendering the image');
        % Create rendering engine.
        re = session.createRenderingEngine();
        re.lookupPixels(pixelsId);
        % Check if default required.
        if (~re.lookupRenderingDef(pixelsId))
            re.resetDefaultSettings(true);
            re.lookupRenderingDef(pixelsId);
        end
        % start the rendering engine
        re.load(); 

-  **Render plane**

::

        % render a plane as compressed. Possible to render it uncompressed.
        pDef = omero.romio.PlaneDef;
        pDef.z = re.getDefaultZ();
        pDef.t = re.getDefaultT();
        pDef.slice = omero.romio.XY.value;
        %Create an input stream
        sizeC = pixels.getSizeC().getValue()-1;
        if (sizeC == 0)
            re.setActive(0, 1);
        else
            for k = 0:sizeC,
                re.setActive(k, 0);
                values = re.renderCompressed(pDef);
                stream = java.io.ByteArrayInputStream(values);
                image = javax.imageio.ImageIO.read(stream);
                stream.close();
                if feature('ShowFigureWindows')
                    figure(k+1);
                    imshow(JavaImageToMatlab(image));
                end
                %make all the channels active.
                for i = 0:sizeC,
                    re.setActive(i, 1);
                end
            end
        end
        % All channels active and save the image as a JPEG.
        values = re.renderCompressed(pDef);
        stream = java.io.ByteArrayInputStream(values);
        image = javax.imageio.ImageIO.read(stream);
        stream.close();
        if feature('ShowFigureWindows')
            figure(pixels.getSizeC().getValue()+1);
            imshow(JavaImageToMatlab(image));
        end 

::

        %Close the rendering engine.
        re.close(); 

::

        % Load cache thumbnail
        disp('Loading the cache thumbnail');
        thumbnail = getThumbnail(session, imageId);
        if feature('ShowFigureWindows')
            figure;
            imshow(thumbnail, []);
        end 

::

        % Load cache thumbnail and set the longest side
        thumbnail = getThumbnailByLongestSide(session, imageId, 96);
        if feature('ShowFigureWindows')
            figure;
            imshow(thumbnail, []);
        end 

